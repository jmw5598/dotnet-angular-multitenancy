// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Xyz.Infrastructure.Data;

#nullable disable

namespace Xyz.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220530135441_AddsColumnOrderAttributeToBaseEntity")]
    partial class AddsColumnOrderAttributeToBaseEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens", (string)null);
                });

            modelBuilder.Entity("Xyz.Core.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_net_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("93fdb1c0-d000-42ae-8cee-287c5c7031fa"),
                            ConcurrencyStamp = "9e7781de-629e-4904-a088-b09250a75e96",
                            Name = "ROOT",
                            NormalizedName = "ROOT"
                        },
                        new
                        {
                            Id = new Guid("44d34c23-263a-4541-a6ba-ddcdc6e6bc9d"),
                            ConcurrencyStamp = "64453c07-a1a5-40c6-9fc7-8f6fad3d2a6a",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("3c21b629-a968-4fe2-9fee-22be79d0a223"),
                            ConcurrencyStamp = "bad94c1a-cf63-40a4-993b-203791f7e6c1",
                            Name = "USER",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Xyz.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_asp_net_users_profile_id");

                    b.ToTable("asp_net_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9f178d0-a1bf-4d93-b13f-dd9328c80b3a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8320340d-7380-4f4f-be11-52744cca1187",
                            Email = "jmw5598@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JMW5598@gmail.com",
                            NormalizedUserName = "JMW5598@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBGpxH1Uz9p1POltxkyiEMQsJU+K5wJDDysFc8qlGe9A0aZwOKC1TUgT1GDwzPehnA==",
                            PhoneNumberConfirmed = false,
                            ProfileId = new Guid("1fd5e9d9-11da-4163-8f18-08f1e4299776"),
                            TwoFactorEnabled = false,
                            UserName = "jmw5598@gmail.com"
                        });
                });

            modelBuilder.Entity("Xyz.Core.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d9f178d0-a1bf-4d93-b13f-dd9328c80b3a"),
                            RoleId = new Guid("93fdb1c0-d000-42ae-8cee-287c5c7031fa")
                        },
                        new
                        {
                            UserId = new Guid("d9f178d0-a1bf-4d93-b13f-dd9328c80b3a"),
                            RoleId = new Guid("44d34c23-263a-4541-a6ba-ddcdc6e6bc9d")
                        },
                        new
                        {
                            UserId = new Guid("d9f178d0-a1bf-4d93-b13f-dd9328c80b3a"),
                            RoleId = new Guid("3c21b629-a968-4fe2-9fee-22be79d0a223")
                        });
                });

            modelBuilder.Entity("Xyz.Core.Entities.Identity.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.ToTable("profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fd5e9d9-11da-4163-8f18-08f1e4299776"),
                            FirstName = "Jason",
                            LastName = "White"
                        });
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.ModulePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_module_permissions");

                    b.ToTable("module_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("008b147a-235a-4e6c-a675-e42a89f15d95"),
                            Name = "Administration Module"
                        },
                        new
                        {
                            Id = new Guid("be996882-2dda-492e-bc67-006c2c1ebab3"),
                            Name = "Dashboard Module"
                        },
                        new
                        {
                            Id = new Guid("0c78ee77-95e7-44d9-bd83-e30439232f84"),
                            Name = "Security Module"
                        });
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ModulePermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_permission_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("ModulePermissionId")
                        .HasDatabaseName("ix_permissions_module_permission_id");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e6ecacb-d781-4760-946a-fcf4f1b0d4cc"),
                            ModulePermissionId = new Guid("008b147a-235a-4e6c-a675-e42a89f15d95"),
                            Name = "Settings"
                        },
                        new
                        {
                            Id = new Guid("ee62f516-df49-4105-af41-164f20aa13cc"),
                            ModulePermissionId = new Guid("008b147a-235a-4e6c-a675-e42a89f15d95"),
                            Name = "User Accounts"
                        },
                        new
                        {
                            Id = new Guid("8c04ef5c-3cc9-447e-bd8d-669abf5801d6"),
                            ModulePermissionId = new Guid("be996882-2dda-492e-bc67-006c2c1ebab3"),
                            Name = "Dashboard Overview"
                        },
                        new
                        {
                            Id = new Guid("b06e333b-7cc6-44d5-ad37-7effba966572"),
                            ModulePermissionId = new Guid("0c78ee77-95e7-44d9-bd83-e30439232f84"),
                            Name = "Security General"
                        },
                        new
                        {
                            Id = new Guid("9399ac6c-1c9a-4803-bfae-ec4ddc41341d"),
                            ModulePermissionId = new Guid("0c78ee77-95e7-44d9-bd83-e30439232f84"),
                            Name = "Security Permissions"
                        });
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.TemplateModulePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("HasAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("has_access");

                    b.Property<Guid>("ModulePermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_permission_id");

                    b.Property<Guid>("TemplateModulePermissionNameId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_module_permission_name_id");

                    b.HasKey("Id")
                        .HasName("pk_template_module_permissions");

                    b.HasIndex("ModulePermissionId")
                        .HasDatabaseName("ix_template_module_permissions_module_permission_id");

                    b.HasIndex("TemplateModulePermissionNameId")
                        .HasDatabaseName("ix_template_module_permissions_template_module_permission_name");

                    b.ToTable("template_module_permissions", (string)null);
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.TemplateModulePermissionName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_on")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasColumnOrder(2);

                    b.HasKey("Id")
                        .HasName("pk_template_module_permission_names");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_template_module_permission_names_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_template_module_permission_names_updated_by_id");

                    b.ToTable("template_module_permission_names", (string)null);
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.TemplatePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("boolean")
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean")
                        .HasColumnName("can_read");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("boolean")
                        .HasColumnName("can_update");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("TemplateModulePermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_module_permission_id");

                    b.HasKey("Id")
                        .HasName("pk_template_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_template_permissions_permission_id");

                    b.HasIndex("TemplateModulePermissionId")
                        .HasDatabaseName("ix_template_permissions_template_module_permission_id");

                    b.ToTable("template_permissions", (string)null);
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.UserModulePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("HasAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("has_access");

                    b.Property<Guid>("ModulePermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_permission_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_module_permissions");

                    b.HasIndex("ModulePermissionId")
                        .HasDatabaseName("ix_user_module_permissions_module_permission_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_module_permissions_user_id");

                    b.ToTable("user_module_permissions", (string)null);
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("boolean")
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean")
                        .HasColumnName("can_read");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("boolean")
                        .HasColumnName("can_update");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("UserModulePermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_module_permission_id");

                    b.HasKey("Id")
                        .HasName("pk_user_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_user_permissions_permission_id");

                    b.HasIndex("UserModulePermissionId")
                        .HasDatabaseName("ix_user_permissions_user_module_permission_id");

                    b.ToTable("user_permissions", (string)null);
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_on")
                        .HasColumnOrder(3);

                    b.Property<Guid>("MakeId")
                        .HasColumnType("uuid")
                        .HasColumnName("make_id");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasColumnOrder(2);

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_vehicles_created_by_id");

                    b.HasIndex("MakeId")
                        .HasDatabaseName("ix_vehicles_make_id");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("ix_vehicles_model_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_vehicles_type_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_vehicles_updated_by_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.VehicleMake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_on")
                        .HasColumnOrder(3);

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasColumnOrder(2);

                    b.HasKey("Id")
                        .HasName("pk_vehicle_makes");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_vehicle_makes_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_vehicle_makes_updated_by_id");

                    b.ToTable("vehicle_makes", (string)null);
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_on")
                        .HasColumnOrder(3);

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasColumnOrder(2);

                    b.HasKey("Id")
                        .HasName("pk_vehicle_models");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_vehicle_models_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_vehicle_models_updated_by_id");

                    b.ToTable("vehicle_models", (string)null);
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_on")
                        .HasColumnOrder(3);

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasColumnOrder(2);

                    b.HasKey("Id")
                        .HasName("pk_vehicle_types");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_vehicle_types_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_vehicle_types_updated_by_id");

                    b.ToTable("vehicle_types", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_users_profiles_profile_id");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.Permission", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Tenant.ModulePermission", null)
                        .WithMany("Permissions")
                        .HasForeignKey("ModulePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permissions_module_permissions_module_permission_id");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.TemplateModulePermission", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Tenant.ModulePermission", "ModulePermission")
                        .WithMany()
                        .HasForeignKey("ModulePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_module_permissions_module_permissions_module_permi");

                    b.HasOne("Xyz.Core.Entities.Tenant.TemplateModulePermissionName", "TemplateModulePermissionName")
                        .WithMany("TemplateModulePermissions")
                        .HasForeignKey("TemplateModulePermissionNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_module_permissions_template_module_permission_name");

                    b.Navigation("ModulePermission");

                    b.Navigation("TemplateModulePermissionName");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.TemplateModulePermissionName", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_module_permission_names_users_created_by_id");

                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_module_permission_names_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.TemplatePermission", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Tenant.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_permissions_permissions_permission_id");

                    b.HasOne("Xyz.Core.Entities.Tenant.TemplateModulePermission", null)
                        .WithMany("TemplatePermissions")
                        .HasForeignKey("TemplateModulePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_permissions_template_module_permissions_template_m");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.UserModulePermission", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Tenant.ModulePermission", "ModulePermission")
                        .WithMany()
                        .HasForeignKey("ModulePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_module_permissions_module_permissions_module_permissio");

                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_module_permissions_users_user_id");

                    b.Navigation("ModulePermission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.UserPermission", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Tenant.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permissions_permissions_permission_id");

                    b.HasOne("Xyz.Core.Entities.Tenant.UserModulePermission", null)
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserModulePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permissions_user_module_permissions_user_module_permis");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.Vehicle", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_users_created_by_id");

                    b.HasOne("Xyz.Core.Entities.Tenant.VehicleMake", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_vehicle_makes_make_id");

                    b.HasOne("Xyz.Core.Entities.Tenant.VehicleModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_vehicle_models_model_id");

                    b.HasOne("Xyz.Core.Entities.Tenant.VehicleType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_vehicle_types_type_id");

                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Make");

                    b.Navigation("Model");

                    b.Navigation("Type");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.VehicleMake", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_makes_users_created_by_id");

                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_makes_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.VehicleModel", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_models_users_created_by_id");

                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_models_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.VehicleType", b =>
                {
                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_types_users_created_by_id");

                    b.HasOne("Xyz.Core.Entities.Identity.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_types_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Identity.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.ModulePermission", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.TemplateModulePermission", b =>
                {
                    b.Navigation("TemplatePermissions");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.TemplateModulePermissionName", b =>
                {
                    b.Navigation("TemplateModulePermissions");
                });

            modelBuilder.Entity("Xyz.Core.Entities.Tenant.UserModulePermission", b =>
                {
                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
